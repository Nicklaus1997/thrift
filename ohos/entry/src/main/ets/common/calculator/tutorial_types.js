/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

import {Thrift} from '@ohos/thrift'


var Operation = {
  'ADD': 1,
  'SUBTRACT': 2,
  'MULTIPLY': 3,
  'DIVIDE': 4,
  'APPEND': 5,
  'REVERSE_BOOLEAN': 6,
  'MAP_SIZE': 7,
  'LIST_SIZE': 8,
  'SET_SIZE': 9,
  'BINARY_SIZE': 10
};
var WorkI8 = function (args) {
  this.num1 = 0;
  this.num2 = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkI8.prototype = {};
WorkI8.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BYTE) {
            this.num1 = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.BYTE) {
            this.num2 = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkI8.prototype.write = function (output) {
  output.writeStructBegin('WorkI8');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.BYTE, 1);
    output.writeByte(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.BYTE, 2);
    output.writeByte(this.num2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkI16 = function (args) {
  this.num1 = 0;
  this.num2 = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkI16.prototype = {};
WorkI16.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I16) {
            this.num1 = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.I16) {
            this.num2 = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkI16.prototype.write = function (output) {
  output.writeStructBegin('WorkI16');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I16, 1);
    output.writeI16(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I16, 2);
    output.writeI16(this.num2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkI32 = function (args) {
  this.num1 = 0;
  this.num2 = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkI32.prototype = {};
WorkI32.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I32) {
            this.num1 = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.I32) {
            this.num2 = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkI32.prototype.write = function (output) {
  output.writeStructBegin('WorkI32');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I32, 1);
    output.writeI32(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I32, 2);
    output.writeI32(this.num2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkI64 = function (args) {
  this.num1 = 0;
  this.num2 = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkI64.prototype = {};
WorkI64.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.num1 = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.I64) {
            this.num2 = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkI64.prototype.write = function (output) {
  output.writeStructBegin('WorkI64');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I64, 1);
    output.writeI64(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I64, 2);
    output.writeI64(this.num2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkDouble = function (args) {
  this.num1 = 0;
  this.num2 = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkDouble.prototype = {};
WorkDouble.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.DOUBLE) {
            this.num1 = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.DOUBLE) {
            this.num2 = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkDouble.prototype.write = function (output) {
  output.writeStructBegin('WorkDouble');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.num2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkBool = function (args) {
  this.value = true;
  this.changeValue = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.changeValue !== undefined && args.changeValue !== null) {
      this.changeValue = args.changeValue;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkBool.prototype = {};
WorkBool.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BOOL) {
            this.value = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.BOOL) {
            this.changeValue = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkBool.prototype.write = function (output) {
  output.writeStructBegin('WorkBool');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 1);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  if (this.changeValue !== null && this.changeValue !== undefined) {
    output.writeFieldBegin('changeValue', Thrift.Type.BOOL, 2);
    output.writeBool(this.changeValue);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkString = function (args) {
  this.value1 = '';
  this.value2 = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.value1 !== undefined && args.value1 !== null) {
      this.value1 = args.value1;
    }
    if (args.value2 !== undefined && args.value2 !== null) {
      this.value2 = args.value2;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkString.prototype = {};
WorkString.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.value1 = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.value2 = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkString.prototype.write = function (output) {
  output.writeStructBegin('WorkString');
  if (this.value1 !== null && this.value1 !== undefined) {
    output.writeFieldBegin('value1', Thrift.Type.STRING, 1);
    output.writeString(this.value1);
    output.writeFieldEnd();
  }
  if (this.value2 !== null && this.value2 !== undefined) {
    output.writeFieldBegin('value2', Thrift.Type.STRING, 2);
    output.writeString(this.value2);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkBinary = function (args) {
  this.value = null;
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkBinary.prototype = {};
WorkBinary.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.value = input.readBinary().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkBinary.prototype.write = function (output) {
  output.writeStructBegin('WorkBinary');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkMap = function (args) {
  this.mapValue = {};
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.mapValue !== undefined && args.mapValue !== null) {
      this.mapValue = Thrift.copyMap(args.mapValue, [null]);
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkMap.prototype = {};
WorkMap.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.MAP) {
            this.mapValue = {};
            var _rtmp31 = input.readMapBegin();
            var _size0 = _rtmp31.size || 0;
            for (var _i2 = 0; _i2 < _size0; ++_i2) {
              if ((_i2 > 0) && (input.rstack.length > input.rpos[input.rpos.length -1] + 1)) {
                input.rstack.pop();
              }
              var key3 = null;
              var val4 = null;
              key3 = input.readString().value;
              val4 = input.readString().value;
              this.mapValue[key3] = val4;
            }
            input.readMapEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkMap.prototype.write = function (output) {
  output.writeStructBegin('WorkMap');
  if (this.mapValue !== null && this.mapValue !== undefined) {
    output.writeFieldBegin('mapValue', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.mapValue));
    for (var kiter5 in this.mapValue) {
      if (Object.prototype.hasOwnProperty.call(this.mapValue, kiter5)) {
        var viter6 = this.mapValue[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkList = function (args) {
  this.listValue = [];
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.listValue !== undefined && args.listValue !== null) {
      this.listValue = Thrift.copyList(args.listValue, [null]);
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkList.prototype = {};
WorkList.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.LIST) {
            this.listValue = [];
            var _rtmp38 = input.readListBegin();
            var _size7 = _rtmp38.size || 0;
            for (var _i9 = 0; _i9 < _size7; ++_i9) {
              var elem10 = null;
              elem10 = input.readString().value;
              this.listValue.push(elem10);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkList.prototype.write = function (output) {
  output.writeStructBegin('WorkList');
  if (this.listValue !== null && this.listValue !== undefined) {
    output.writeFieldBegin('listValue', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.listValue.length);
    for (var iter11 in this.listValue) {
      if (Object.prototype.hasOwnProperty.call(this.listValue, iter11)) {
        iter11 = this.listValue[iter11];
        output.writeString(iter11);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var WorkSet = function (args) {
  this.setValue = [];
  this.op = null;
  this.comment = null;
  if (args) {
    if (args.setValue !== undefined && args.setValue !== null) {
      this.setValue = Thrift.copyList(args.setValue, [null]);
    }
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
WorkSet.prototype = {};
WorkSet.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.SET) {
            this.setValue = [];
            var _rtmp313 = input.readSetBegin();
            var _size12 = _rtmp313.size || 0;
            for (var _i14 = 0; _i14 < _size12; ++_i14) {
              var elem15 = null;
              elem15 = input.readString().value;
              this.setValue.push(elem15);
            }
            input.readSetEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 3:
          if (ftype == Thrift.Type.I32) {
            this.op = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 4:
          if (ftype == Thrift.Type.STRING) {
            this.comment = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

WorkSet.prototype.write = function (output) {
  output.writeStructBegin('WorkSet');
  if (this.setValue !== null && this.setValue !== undefined) {
    output.writeFieldBegin('setValue', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.setValue.length);
    for (var iter16 in this.setValue) {
      if (Object.prototype.hasOwnProperty.call(this.setValue, iter16)) {
        iter16 = this.setValue[iter16];
        output.writeString(iter16);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 3);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationI8 = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationI8, Thrift.TException);
InvalidOperationI8.prototype.name = 'InvalidOperationI8';
InvalidOperationI8.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BYTE) {
            this.whatOp = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationI8.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationI8');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.BYTE, 1);
    output.writeByte(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationI16 = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationI16, Thrift.TException);
InvalidOperationI16.prototype.name = 'InvalidOperationI16';
InvalidOperationI16.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I16) {
            this.whatOp = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationI16.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationI16');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.I16, 1);
    output.writeI16(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationI32 = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationI32, Thrift.TException);
InvalidOperationI32.prototype.name = 'InvalidOperationI32';
InvalidOperationI32.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I32) {
            this.whatOp = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationI32.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationI32');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.I32, 1);
    output.writeI32(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationI64 = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationI64, Thrift.TException);
InvalidOperationI64.prototype.name = 'InvalidOperationI64';
InvalidOperationI64.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.whatOp = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationI64.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationI64');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.I64, 1);
    output.writeI64(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationDouble = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationDouble, Thrift.TException);
InvalidOperationDouble.prototype.name = 'InvalidOperationDouble';
InvalidOperationDouble.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.DOUBLE) {
            this.whatOp = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationDouble.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationDouble');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationBool = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationBool, Thrift.TException);
InvalidOperationBool.prototype.name = 'InvalidOperationBool';
InvalidOperationBool.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BOOL) {
            this.whatOp = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationBool.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationBool');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.BOOL, 1);
    output.writeBool(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationString = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationString, Thrift.TException);
InvalidOperationString.prototype.name = 'InvalidOperationString';
InvalidOperationString.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.whatOp = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationString.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationString');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.STRING, 1);
    output.writeString(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationBinary = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationBinary, Thrift.TException);
InvalidOperationBinary.prototype.name = 'InvalidOperationBinary';
InvalidOperationBinary.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.whatOp = input.readBinary().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationBinary.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationBinary');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.STRING, 1);
    output.writeBinary(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationMap = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = Thrift.copyMap(args.whatOp, [null]);
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationMap, Thrift.TException);
InvalidOperationMap.prototype.name = 'InvalidOperationMap';
InvalidOperationMap.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.MAP) {
            this.whatOp = {};
            var _rtmp318 = input.readMapBegin();
            var _size17 = _rtmp318.size || 0;
            for (var _i19 = 0; _i19 < _size17; ++_i19) {
              if ((_i19 > 0) && (input.rstack.length > input.rpos[input.rpos.length -1] + 1)) {
                input.rstack.pop();
              }
              var key20 = null;
              var val21 = null;
              key20 = input.readString().value;
              val21 = input.readString().value;
              this.whatOp[key20] = val21;
            }
            input.readMapEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationMap.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationMap');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.whatOp));
    for (var kiter22 in this.whatOp) {
      if (Object.prototype.hasOwnProperty.call(this.whatOp, kiter22)) {
        var viter23 = this.whatOp[kiter22];
        output.writeString(kiter22);
        output.writeString(viter23);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationList = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = Thrift.copyList(args.whatOp, [null]);
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationList, Thrift.TException);
InvalidOperationList.prototype.name = 'InvalidOperationList';
InvalidOperationList.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.LIST) {
            this.whatOp = [];
            var _rtmp325 = input.readListBegin();
            var _size24 = _rtmp325.size || 0;
            for (var _i26 = 0; _i26 < _size24; ++_i26) {
              var elem27 = null;
              elem27 = input.readString().value;
              this.whatOp.push(elem27);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationList.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationList');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.whatOp.length);
    for (var iter28 in this.whatOp) {
      if (Object.prototype.hasOwnProperty.call(this.whatOp, iter28)) {
        iter28 = this.whatOp[iter28];
        output.writeString(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var InvalidOperationSet = function (args) {
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = Thrift.copyList(args.whatOp, [null]);
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperationSet, Thrift.TException);
InvalidOperationSet.prototype.name = 'InvalidOperationSet';
InvalidOperationSet.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.SET) {
            this.whatOp = [];
            var _rtmp330 = input.readSetBegin();
            var _size29 = _rtmp330.size || 0;
            for (var _i31 = 0; _i31 < _size29; ++_i31) {
              var elem32 = null;
              elem32 = input.readString().value;
              this.whatOp.push(elem32);
            }
            input.readSetEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.why = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

InvalidOperationSet.prototype.write = function (output) {
  output.writeStructBegin('InvalidOperationSet');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.whatOp.length);
    for (var iter33 in this.whatOp) {
      if (Object.prototype.hasOwnProperty.call(this.whatOp, iter33)) {
        iter33 = this.whatOp[iter33];
        output.writeString(iter33);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

export {InvalidOperationI8, WorkI8, Operation,
  InvalidOperationI16, WorkI16,
  InvalidOperationI32, WorkI32,
  InvalidOperationI64, WorkI64,
  InvalidOperationDouble, WorkDouble,
  InvalidOperationBinary, WorkBinary,
  InvalidOperationBool, WorkBool,
  InvalidOperationString, WorkString,
  InvalidOperationList, WorkList,
  InvalidOperationMap, WorkMap,
  InvalidOperationSet, WorkSet
};
