/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

import {Thrift} from '@ohos/thrift'
import {InvalidOperationI8, WorkI8,
  InvalidOperationI16, WorkI16,
  InvalidOperationI32, WorkI32,
  InvalidOperationI64, WorkI64,
  InvalidOperationDouble, WorkDouble,
  InvalidOperationBool, WorkBool,
  InvalidOperationBinary, WorkBinary,
  InvalidOperationString, WorkString,
  InvalidOperationList, WorkList,
  InvalidOperationMap, WorkMap,
  InvalidOperationSet, WorkSet} from './tutorial_types'
import SharedServiceClient from './SharedService'


// HELPER FUNCTIONS AND STRUCTURES

var CalculatorPingArgs = function (args) {
};
CalculatorPingArgs.prototype = {};
CalculatorPingArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      input.skip(ftype);
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPingArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPingArgs');
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorPingResult = function (args) {
};
CalculatorPingResult.prototype = {};
CalculatorPingResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
       end = true;
    } else {
      input.skip(ftype);
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPingResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPingResult');
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI8Args = function (args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
CalculatorAddI8Args.prototype = {};
CalculatorAddI8Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BYTE) {
            this.num1 = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.BYTE) {
            this.num2 = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI8Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI8Args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.BYTE, 1);
    output.writeByte(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.BYTE, 2);
    output.writeByte(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI8Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorAddI8Result.prototype = {};
CalculatorAddI8Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.BYTE) {
            this.success = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI8Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI8Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI16Args = function (args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
CalculatorAddI16Args.prototype = {};
CalculatorAddI16Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I16) {
            this.num1 = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.I16) {
            this.num2 = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI16Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI16Args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I16, 1);
    output.writeI16(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I16, 2);
    output.writeI16(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI16Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorAddI16Result.prototype = {};
CalculatorAddI16Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I16) {
            this.success = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI16Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI16Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I16, 0);
    output.writeI16(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI32Args = function (args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
CalculatorAddI32Args.prototype = {};
CalculatorAddI32Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I32) {
            this.num1 = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.I32) {
            this.num2 = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI32Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI32Args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I32, 1);
    output.writeI32(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I32, 2);
    output.writeI32(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI32Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorAddI32Result.prototype = {};
CalculatorAddI32Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I32) {
            this.success = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI32Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI32Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI64Args = function (args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
CalculatorAddI64Args.prototype = {};
CalculatorAddI64Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.num1 = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.I64) {
            this.num2 = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI64Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI64Args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I64, 1);
    output.writeI64(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I64, 2);
    output.writeI64(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddI64Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorAddI64Result.prototype = {};
CalculatorAddI64Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddI64Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddI64Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddDoubleArgs = function (args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
CalculatorAddDoubleArgs.prototype = {};
CalculatorAddDoubleArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.DOUBLE) {
            this.num1 = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.DOUBLE) {
            this.num2 = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddDoubleArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddDoubleArgs');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAddDoubleResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorAddDoubleResult.prototype = {};
CalculatorAddDoubleResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.DOUBLE) {
            this.success = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAddDoubleResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAddDoubleResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAppendStringArgs = function (args) {
  this.value1 = null;
  this.value2 = null;
  if (args) {
    if (args.value1 !== undefined && args.value1 !== null) {
      this.value1 = args.value1;
    }
    if (args.value2 !== undefined && args.value2 !== null) {
      this.value2 = args.value2;
    }
  }
};
CalculatorAppendStringArgs.prototype = {};
CalculatorAppendStringArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.value1 = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRING) {
            this.value2 = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd()
    }
  }
  input.readStructEnd();
};

CalculatorAppendStringArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAppendStringArgs');
  if (this.value1 !== null && this.value1 !== undefined) {
    output.writeFieldBegin('value1', Thrift.Type.STRING, 1);
    output.writeString(this.value1);
    output.writeFieldEnd();
  }
  if (this.value2 !== null && this.value2 !== undefined) {
    output.writeFieldBegin('value2', Thrift.Type.STRING, 2);
    output.writeString(this.value2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorAppendStringResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorAppendStringResult.prototype = {};
CalculatorAppendStringResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRING) {
            this.success = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorAppendStringResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorAppendStringResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorReverseBooleanArgs = function (args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
CalculatorReverseBooleanArgs.prototype = {};
CalculatorReverseBooleanArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BOOL) {
            this.value = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorReverseBooleanArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorReverseBooleanArgs');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 1);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorReverseBooleanResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorReverseBooleanResult.prototype = {};
CalculatorReverseBooleanResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.BOOL) {
            this.success = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorReverseBooleanResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorReverseBooleanResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorByteArraySizeArgs = function (args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
CalculatorByteArraySizeArgs.prototype = {};
CalculatorByteArraySizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.value = input.readBinary().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorByteArraySizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorByteArraySizeArgs');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorByteArraySizeResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorByteArraySizeResult.prototype = {};
CalculatorByteArraySizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorByteArraySizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorByteArraySizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorListSizeArgs = function (args) {
  this.listValue = null;
  if (args) {
    if (args.listValue !== undefined && args.listValue !== null) {
      this.listValue = Thrift.copyList(args.listValue, [null]);
    }
  }
};
CalculatorListSizeArgs.prototype = {};
CalculatorListSizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.LIST) {
            this.listValue = [];
            var _rtmp335 = input.readListBegin();
            var _size34 = _rtmp335.size || 0;
            for (var _i36 = 0; _i36 < _size34; ++_i36) {
              var elem37 = null;
              elem37 = input.readString().value;
              this.listValue.push(elem37);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorListSizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorListSizeArgs');
  if (this.listValue !== null && this.listValue !== undefined) {
    output.writeFieldBegin('listValue', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.listValue.length);
    for (var iter38 in this.listValue) {
      if (Object.prototype.hasOwnProperty.call(this.listValue, iter38)) {
        iter38 = this.listValue[iter38];
        output.writeString(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorListSizeResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorListSizeResult.prototype = {};
CalculatorListSizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorListSizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorListSizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorSetSizeArgs = function (args) {
  this.setValue = null;
  if (args) {
    if (args.setValue !== undefined && args.setValue !== null) {
      this.setValue = Thrift.copyList(args.setValue, [null]);
    }
  }
};
CalculatorSetSizeArgs.prototype = {};
CalculatorSetSizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.SET) {
            this.setValue = [];
            var _rtmp340 = input.readSetBegin();
            var _size39 = _rtmp340.size || 0;
            for (var _i41 = 0; _i41 < _size39; ++_i41) {
              var elem42 = null;
              elem42 = input.readString().value;
              this.setValue.push(elem42);
            }
            input.readSetEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorSetSizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorSetSizeArgs');
  if (this.setValue !== null && this.setValue !== undefined) {
    output.writeFieldBegin('setValue', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.setValue.length);
    for (var iter43 in this.setValue) {
      if (Object.prototype.hasOwnProperty.call(this.setValue, iter43)) {
        iter43 = this.setValue[iter43];
        output.writeString(iter43);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorSetSizeResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorSetSizeResult.prototype = {};
CalculatorSetSizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorSetSizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorSetSizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorMapSizeArgs = function (args) {
  this.mapValue = null;
  if (args) {
    if (args.mapValue !== undefined && args.mapValue !== null) {
      this.mapValue = Thrift.copyMap(args.mapValue, [null]);
    }
  }
};
CalculatorMapSizeArgs.prototype = {};
CalculatorMapSizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.MAP) {
            this.mapValue = {};
            var _rtmp345 = input.readMapBegin();
            var _size44 = _rtmp345.size || 0;
            for (var _i46 = 0; _i46 < _size44; ++_i46) {
              if ((_i46 > 0) && (input.rstack.length > input.rpos[input.rpos.length -1] + 1)) {
                input.rstack.pop();
              }
              var key47 = null;
              var val48 = null;
              key47 = input.readString().value;
              val48 = input.readString().value;
              this.mapValue[key47] = val48;
            }
            input.readMapEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorMapSizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorMapSizeArgs');
  if (this.mapValue !== null && this.mapValue !== undefined) {
    output.writeFieldBegin('mapValue', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.mapValue));
    for (var kiter49 in this.mapValue) {
      if (Object.prototype.hasOwnProperty.call(this.mapValue, kiter49)) {
        var viter50 = this.mapValue[kiter49];
        output.writeString(kiter49);
        output.writeString(viter50);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorMapSizeResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CalculatorMapSizeResult.prototype = {};
CalculatorMapSizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd()
};

CalculatorMapSizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorMapSizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI8Args = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkI8(args.w);
    }
  }
};
CalculatorCalculateI8Args.prototype = {};
CalculatorCalculateI8Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BYTE) {
            this.logid = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkI8();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI8Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI8Args');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.BYTE, 1);
    output.writeByte(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI8Result = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationI8) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorCalculateI8Result.prototype = {};
CalculatorCalculateI8Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.BYTE) {
            this.success = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationI8();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI8Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI8Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI16Args = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkI16(args.w);
    }
  }
};
CalculatorCalculateI16Args.prototype = {};
CalculatorCalculateI16Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I16) {
            this.logid = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkI16();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI16Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI16Args');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I16, 1);
    output.writeI16(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI16Result = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationI16) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorCalculateI16Result.prototype = {};
CalculatorCalculateI16Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I16) {
            this.success = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationI16();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI16Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI16Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I16, 0);
    output.writeI16(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI32Args = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkI32(args.w);
    }
  }
};
CalculatorCalculateI32Args.prototype = {};
CalculatorCalculateI32Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I32) {
            this.logid = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkI32();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI32Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI32Args');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I32, 1);
    output.writeI32(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI32Result = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationI32) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorCalculateI32Result.prototype = {};
CalculatorCalculateI32Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I32) {
            this.success = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationI32();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI32Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI32Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI64Args = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkI64(args.w);
    }
  }
};
CalculatorCalculateI64Args.prototype = {};
CalculatorCalculateI64Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkI64();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI64Args.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI64Args');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateI64Result = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationI64) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorCalculateI64Result.prototype = {};
CalculatorCalculateI64Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationI64();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateI64Result.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateI64Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateDoubleArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkDouble(args.w);
    }
  }
};
CalculatorCalculateDoubleArgs.prototype = {};
CalculatorCalculateDoubleArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.DOUBLE) {
            this.logid = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkDouble();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateDoubleArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateDoubleArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorCalculateDoubleResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationDouble) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorCalculateDoubleResult.prototype = {};
CalculatorCalculateDoubleResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.DOUBLE) {
            this.success = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationDouble();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorCalculateDoubleResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorCalculateDoubleResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorPerformAppendStringArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkString(args.w);
    }
  }
};
CalculatorPerformAppendStringArgs.prototype = {};
CalculatorPerformAppendStringArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkString();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPerformAppendStringArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPerformAppendStringArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorPerformAppendStringResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationString) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorPerformAppendStringResult.prototype = {};
CalculatorPerformAppendStringResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRING) {
            this.success = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationString();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPerformAppendStringResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPerformAppendStringResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorPerformReverseBooleanArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkBool(args.w);
    }
  }
};
CalculatorPerformReverseBooleanArgs.prototype = {};
CalculatorPerformReverseBooleanArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkBool();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPerformReverseBooleanArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPerformReverseBooleanArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd()
};

var CalculatorPerformReverseBooleanResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationBool) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorPerformReverseBooleanResult.prototype = {};
CalculatorPerformReverseBooleanResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.BOOL) {
            this.success = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationBool();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPerformReverseBooleanResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPerformReverseBooleanResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorPerformByteArraySizeArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkBinary(args.w);
    }
  }
};
CalculatorPerformByteArraySizeArgs.prototype = {};
CalculatorPerformByteArraySizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkBinary();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPerformByteArraySizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPerformByteArraySizeArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorPerformByteArraySizeResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationBinary) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorPerformByteArraySizeResult.prototype = {};
CalculatorPerformByteArraySizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationBinary();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorPerformByteArraySizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorPerformByteArraySizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorGetListSizeArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkList(args.w);
    }
  }
};
CalculatorGetListSizeArgs.prototype = {};
CalculatorGetListSizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkList();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorGetListSizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorGetListSizeArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorGetListSizeResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationList) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorGetListSizeResult.prototype = {};
CalculatorGetListSizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationList();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorGetListSizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorGetListSizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorGetSetSizeArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkSet(args.w);
    }
  }
};
CalculatorGetSetSizeArgs.prototype = {};
CalculatorGetSetSizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkSet();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorGetSetSizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorGetSetSizeArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorGetSetSizeResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationSet) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorGetSetSizeResult.prototype = {};
CalculatorGetSetSizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationSet();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorGetSetSizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorGetSetSizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorGetMapSizeArgs = function (args) {
  this.logid = null;
  this.w = null;
  if (args) {
    if (args.logid !== undefined && args.logid !== null) {
      this.logid = args.logid;
    }
    if (args.w !== undefined && args.w !== null) {
      this.w = new WorkMap(args.w);
    }
  }
};
CalculatorGetMapSizeArgs.prototype = {};
CalculatorGetMapSizeArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.logid = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype == Thrift.Type.STRUCT) {
            this.w = new WorkMap();
            this.w.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorGetMapSizeArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorGetMapSizeArgs');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I64, 1);
    output.writeI64(this.logid);
    output.writeFieldEnd();
  }
  if (this.w !== null && this.w !== undefined) {
    output.writeFieldBegin('w', Thrift.Type.STRUCT, 2);
    this.w.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorGetMapSizeResult = function (args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof InvalidOperationMap) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
CalculatorGetMapSizeResult.prototype = {};
CalculatorGetMapSizeResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.I64) {
            this.success = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ouch = new InvalidOperationMap();
            this.ouch.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorGetMapSizeResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorGetMapSizeResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorZipArgs = function (args) {
};
CalculatorZipArgs.prototype = {};
CalculatorZipArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      input.skip(ftype);
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorZipArgs.prototype.write = function (output) {
  output.writeStructBegin('CalculatorZipArgs');
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorZipResult = function (args) {
};
CalculatorZipResult.prototype = {};
CalculatorZipResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      input.skip(ftype);
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

CalculatorZipResult.prototype.write = function (output) {
  output.writeStructBegin('CalculatorZipResult');
  output.writeFieldStop();
  output.writeStructEnd();
};

var CalculatorClient = function (input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(CalculatorClient, SharedServiceClient);

CalculatorClient.prototype.ping = function (callback) {
  this.sendPing(callback);
  if (!callback) {
    this.recvPing();
  }
};

CalculatorClient.prototype.sendPing = function (callback) {
  var args = new CalculatorPingArgs();
  try {
    this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvPing();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvPing = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorPingResult();
  result.read(this.input);
  this.input.readMessageEnd();
};

CalculatorClient.prototype.addI8 = function (num1, num2, callback) {
  this.sendAddI8(num1, num2, callback);
  if (!callback) {
    return this.recvAddI8();
  }
};

CalculatorClient.prototype.sendAddI8 = function (num1, num2, callback) {
  var params = {
    num1: num1,
    num2: num2
  };
  var args = new CalculatorAddI8Args(params);
  try {
    this.output.writeMessageBegin('addI8', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvAddI8();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvAddI8 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorAddI8Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addI8 failed: unknown result';
};

CalculatorClient.prototype.addI16 = function (num1, num2, callback) {
  this.sendAddI16(num1, num2, callback);
  if (!callback) {
    return this.recvAddI16();
  }
};

CalculatorClient.prototype.sendAddI16 = function (num1, num2, callback) {
  var params = {
    num1: num1,
    num2: num2
  };
  var args = new CalculatorAddI16Args(params);
  try {
    this.output.writeMessageBegin('addI16', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvAddI16();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvAddI16 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorAddI16Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addI16 failed: unknown result';
};

CalculatorClient.prototype.addI32 = function (num1, num2, callback) {
  this.sendAddI32(num1, num2, callback);
  if (!callback) {
    return this.recvAddI32();
  }
};

CalculatorClient.prototype.sendAddI32 = function (num1, num2, callback) {
  var params = {
    num1: num1,
    num2: num2
  };
  var args = new CalculatorAddI32Args(params);
  try {
    this.output.writeMessageBegin('addI32', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvAddI32();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvAddI32 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorAddI32Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addI32 failed: unknown result';
};

CalculatorClient.prototype.addI64 = function (num1, num2, callback) {
  this.sendAddI64(num1, num2, callback);
  if (!callback) {
    return this.recvAddI64();
  }
};

CalculatorClient.prototype.sendAddI64 = function (num1, num2, callback) {
  var params = {
    num1: num1,
    num2: num2
  };
  var args = new CalculatorAddI64Args(params);
  try {
    this.output.writeMessageBegin('addI64', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvAddI64();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvAddI64 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorAddI64Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addI64 failed: unknown result';
};

CalculatorClient.prototype.addDouble = function (num1, num2, callback) {
  this.sendAddDouble(num1, num2, callback);
  if (!callback) {
    return this.recvAddDouble();
  }
};

CalculatorClient.prototype.sendAddDouble = function (num1, num2, callback) {
  var params = {
    num1: num1,
    num2: num2
  };
  var args = new CalculatorAddDoubleArgs(params);
  try {
    this.output.writeMessageBegin('addDouble', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvAddDouble();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvAddDouble = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorAddDoubleResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addDouble failed: unknown result';
};

CalculatorClient.prototype.appendString = function (value1, value2, callback) {
  this.sendAppendString(value1, value2, callback);
  if (!callback) {
    return this.recvAppendString();
  }
};

CalculatorClient.prototype.sendAppendString = function (value1, value2, callback) {
  var params = {
    value1: value1,
    value2: value2
  };
  var args = new CalculatorAppendStringArgs(params);
  try {
    this.output.writeMessageBegin('appendString', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvAppendString();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvAppendString = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorAppendStringResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'appendString failed: unknown result';
};

CalculatorClient.prototype.reverseBoolean = function (value, callback) {
  this.sendReverseBoolean(value, callback);
  if (!callback) {
    return this.recvReverseBoolean();
  }
};

CalculatorClient.prototype.sendReverseBoolean = function (value, callback) {
  var params = {
    value: value
  };
  var args = new CalculatorReverseBooleanArgs(params);
  try {
    this.output.writeMessageBegin('reverseBoolean', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvReverseBoolean();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvReverseBoolean = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorReverseBooleanResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'reverseBoolean failed: unknown result';
};

CalculatorClient.prototype.byteArraySize = function (value, callback) {
  this.sendByteArraySize(value, callback);
  if (!callback) {
    return this.recvByteArraySize();
  }
};

CalculatorClient.prototype.sendByteArraySize = function (value, callback) {
  var params = {
    value: value
  };
  var args = new CalculatorByteArraySizeArgs(params);
  try {
    this.output.writeMessageBegin('byteArraySize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvByteArraySize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvByteArraySize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorByteArraySizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'byteArraySize failed: unknown result';
};

CalculatorClient.prototype.listSize = function (listValue, callback) {
  this.sendListSize(listValue, callback);
  if (!callback) {
    return this.recvListSize();
  }
};

CalculatorClient.prototype.sendListSize = function (listValue, callback) {
  var params = {
    listValue: listValue
  };
  var args = new CalculatorListSizeArgs(params);
  try {
    this.output.writeMessageBegin('listSize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvListSize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvListSize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorListSizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listSize failed: unknown result';
};

CalculatorClient.prototype.setSize = function (setValue, callback) {
  this.sendSetSize(setValue, callback);
  if (!callback) {
    return this.recvSetSize();
  }
};

CalculatorClient.prototype.sendSetSize = function (setValue, callback) {
  var params = {
    setValue: setValue
  };
  var args = new CalculatorSetSizeArgs(params);
  try {
    this.output.writeMessageBegin('setSize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvSetSize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvSetSize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorSetSizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'setSize failed: unknown result';
};

CalculatorClient.prototype.mapSize = function (mapValue, callback) {
  this.sendMapSize(mapValue, callback);
  if (!callback) {
    return this.recvMapSize();
  }
};

CalculatorClient.prototype.sendMapSize = function (mapValue, callback) {
  var params = {
    mapValue: mapValue
  };
  var args = new CalculatorMapSizeArgs(params);
  try {
    this.output.writeMessageBegin('mapSize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvMapSize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvMapSize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorMapSizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'mapSize failed: unknown result';
};

CalculatorClient.prototype.calculateI8 = function (logid, w, callback) {
  this.sendCalculateI8(logid, w, callback);
  if (!callback) {
    return this.recvCalculateI8();
  }
};

CalculatorClient.prototype.sendCalculateI8 = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorCalculateI8Args(params);
  try {
    this.output.writeMessageBegin('calculateI8', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvCalculateI8();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvCalculateI8 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorCalculateI8Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculateI8 failed: unknown result';
};

CalculatorClient.prototype.calculateI16 = function (logid, w, callback) {
  this.sendCalculateI16(logid, w, callback);
  if (!callback) {
    return this.recvCalculateI16();
  }
};

CalculatorClient.prototype.sendCalculateI16 = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorCalculateI16Args(params);
  try {
    this.output.writeMessageBegin('calculateI16', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvCalculateI16();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvCalculateI16 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorCalculateI16Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculateI16 failed: unknown result';
};

CalculatorClient.prototype.calculateI32 = function (logid, w, callback) {
  this.sendCalculateI32(logid, w, callback);
  if (!callback) {
    return this.recvCalculateI32();
  }
};

CalculatorClient.prototype.sendCalculateI32 = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorCalculateI32Args(params);
  try {
    this.output.writeMessageBegin('calculateI32', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvCalculateI32();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvCalculateI32 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorCalculateI32Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculateI32 failed: unknown result';
};

CalculatorClient.prototype.calculateI64 = function (logid, w, callback) {
  this.sendCalculateI64(logid, w, callback);
  if (!callback) {
    return this.recvCalculateI64();
  }
};

CalculatorClient.prototype.sendCalculateI64 = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorCalculateI64Args(params);
  try {
    this.output.writeMessageBegin('calculateI64', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvCalculateI64();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvCalculateI64 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorCalculateI64Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculateI64 failed: unknown result';
};

CalculatorClient.prototype.calculateDouble = function (logid, w, callback) {
  this.sendCalculateDouble(logid, w, callback);
  if (!callback) {
    return this.recvCalculateDouble();
  }
};

CalculatorClient.prototype.sendCalculateDouble = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorCalculateDoubleArgs(params);
  try {
    this.output.writeMessageBegin('calculateDouble', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvCalculateDouble();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvCalculateDouble = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorCalculateDoubleResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculateDouble failed: unknown result';
};

CalculatorClient.prototype.performAppendString = function (logid, w, callback) {
  this.sendPerformAppendString(logid, w, callback);
  if (!callback) {
    return this.recvPerformAppendString();
  }
};

CalculatorClient.prototype.sendPerformAppendString = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorPerformAppendStringArgs(params);
  try {
    this.output.writeMessageBegin('performAppendString', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvPerformAppendString();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvPerformAppendString = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorPerformAppendStringResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'performAppendString failed: unknown result';
};

CalculatorClient.prototype.performReverseBoolean = function (logid, w, callback) {
  this.sendPerformReverseBoolean(logid, w, callback);
  if (!callback) {
    return this.recvPerformReverseBoolean();
  }
};

CalculatorClient.prototype.sendPerformReverseBoolean = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorPerformReverseBooleanArgs(params);
  try {
    this.output.writeMessageBegin('performReverseBoolean', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvPerformReverseBoolean();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvPerformReverseBoolean = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorPerformReverseBooleanResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'performReverseBoolean failed: unknown result';
};

CalculatorClient.prototype.performByteArraySize = function (logid, w, callback) {
  this.sendPerformByteArraySize(logid, w, callback);
  if (!callback) {
    return this.recvPerformByteArraySize();
  }
};

CalculatorClient.prototype.sendPerformByteArraySize = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorPerformByteArraySizeArgs(params);
  try {
    this.output.writeMessageBegin('performByteArraySize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvPerformByteArraySize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvPerformByteArraySize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorPerformByteArraySizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'performByteArraySize failed: unknown result';
};

CalculatorClient.prototype.getListSize = function (logid, w, callback) {
  this.sendGetListSize(logid, w, callback);
  if (!callback) {
    return this.recvGetListSize();
  }
};

CalculatorClient.prototype.sendGetListSize = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorGetListSizeArgs(params);
  try {
    this.output.writeMessageBegin('getListSize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetListSize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvGetListSize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorGetListSizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getListSize failed: unknown result';
};

CalculatorClient.prototype.getSetSize = function (logid, w, callback) {
  this.sendGetSetSize(logid, w, callback);
  if (!callback) {
    return this.recvGetSetSize();
  }
};

CalculatorClient.prototype.sendGetSetSize = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorGetSetSizeArgs(params);
  try {
    this.output.writeMessageBegin('getSetSize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetSetSize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvGetSetSize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorGetSetSizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSetSize failed: unknown result';
};

CalculatorClient.prototype.getMapSize = function (logid, w, callback) {
  this.sendGetMapSize(logid, w, callback);
  if (!callback) {
    return this.recvGetMapSize();
  }
};

CalculatorClient.prototype.sendGetMapSize = function (logid, w, callback) {
  var params = {
    logid: logid,
    w: w
  };
  var args = new CalculatorGetMapSizeArgs(params);
  try {
    this.output.writeMessageBegin('getMapSize', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetMapSize();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CalculatorClient.prototype.recvGetMapSize = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalculatorGetMapSizeResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMapSize failed: unknown result';
};

CalculatorClient.prototype.zip = function (callback) {
  this.sendZip(callback);
};

CalculatorClient.prototype.sendZip = function (callback) {
  var args = new CalculatorZipArgs();
  try {
    this.output.writeMessageBegin('zip', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

export default CalculatorClient;
