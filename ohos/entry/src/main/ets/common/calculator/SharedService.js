/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

import {Thrift} from '@ohos/thrift'
import SharedStruct from './shared_types'

// HELPER FUNCTIONS AND STRUCTURES

var SharedServiceGetStructI8Args = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructI8Args.prototype = {};
SharedServiceGetStructI8Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BYTE) {
            this.key = input.readByte().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI8Args.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI8Args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.BYTE, 1);
    output.writeByte(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI8Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructI8(args.success);
    }
  }
};
SharedServiceGetStructI8Result.prototype = {};
SharedServiceGetStructI8Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructI8();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI8Result.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI8Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI16Args = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructI16Args.prototype = {};
SharedServiceGetStructI16Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I16) {
            this.key = input.readI16().value;
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI16Args.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI16Args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I16, 1);
    output.writeI16(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI16Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructI16(args.success);
    }
  }
};
SharedServiceGetStructI16Result.prototype = {};
SharedServiceGetStructI16Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructI16();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI16Result.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI16Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI32Args = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructI32Args.prototype = {};
SharedServiceGetStructI32Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I32) {
            this.key = input.readI32().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI32Args.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI32Args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I32, 1);
    output.writeI32(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI32Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructI32(args.success);
    }
  }
};
SharedServiceGetStructI32Result.prototype = {};
SharedServiceGetStructI32Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructI32();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI32Result.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI32Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI64Args = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructI64Args.prototype = {};
SharedServiceGetStructI64Args.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.I64) {
            this.key = input.readI64().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI64Args.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI64Args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I64, 1);
    output.writeI64(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructI64Result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructI64(args.success);
    }
  }
};
SharedServiceGetStructI64Result.prototype = {};
SharedServiceGetStructI64Result.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructI64();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructI64Result.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructI64Result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructDoubleArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructDoubleArgs.prototype = {};
SharedServiceGetStructDoubleArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.DOUBLE) {
            this.key = input.readDouble().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructDoubleArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructDoubleArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructDoubleResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructDouble(args.success);
    }
  }
};
SharedServiceGetStructDoubleResult.prototype = {};
SharedServiceGetStructDoubleResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructDouble();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructDoubleResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructDoubleResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructBoolArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructBoolArgs.prototype = {};
SharedServiceGetStructBoolArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.BOOL) {
            this.key = input.readBool().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructBoolArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructBoolArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.BOOL, 1);
    output.writeBool(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructBoolResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructBool(args.success);
    }
  }
};
SharedServiceGetStructBoolResult.prototype = {};
SharedServiceGetStructBoolResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructBool();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructBoolResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructBoolResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructBinaryArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructBinaryArgs.prototype = {};
SharedServiceGetStructBinaryArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.key = input.readBinary().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructBinaryArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructBinaryArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeBinary(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructBinaryResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructBinary(args.success);
    }
  }
};
SharedServiceGetStructBinaryResult.prototype = {};
SharedServiceGetStructBinaryResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructBinary();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructBinaryResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructBinaryResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructStringArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
SharedServiceGetStructStringArgs.prototype = {};
SharedServiceGetStructStringArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.key = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructStringArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructStringArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructStringResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructString(args.success);
    }
  }
};
SharedServiceGetStructStringResult.prototype = {};
SharedServiceGetStructStringResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructString();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructStringResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructStringResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructListArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = Thrift.copyList(args.key, [null]);
    }
  }
};
SharedServiceGetStructListArgs.prototype = {};
SharedServiceGetStructListArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.LIST) {
            this.key = [];
            var _rtmp318 = input.readListBegin();
            var _size17 = _rtmp318.size || 0;
            for (var _i19 = 0; _i19 < _size17; ++_i19) {
              var elem20 = null;
              elem20 = input.readString().value;
              this.key.push(elem20);
            }
            input.readListEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructListArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructListArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.key.length);
    for (var iter21 in this.key) {
      if (Object.prototype.hasOwnProperty.call(this.key, iter21)) {
        iter21 = this.key[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructListResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructList(args.success);
    }
  }
};
SharedServiceGetStructListResult.prototype = {};
SharedServiceGetStructListResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructList();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructListResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructListResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructMapArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = Thrift.copyMap(args.key, [null]);
    }
  }
};
SharedServiceGetStructMapArgs.prototype = {};
SharedServiceGetStructMapArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.MAP) {
            this.key = {};
            var _rtmp323 = input.readMapBegin();
            var _size22 = _rtmp323.size || 0;
            for (var _i24 = 0; _i24 < _size22; ++_i24) {
              if ((_i24 > 0) && (input.rstack.length > input.rpos[input.rpos.length -1] + 1)) {
                input.rstack.pop();
              }
              var key25 = null;
              var val26 = null;
              key25 = input.readString().value;
              val26 = input.readString().value;
              this.key[key25] = val26;
            }
            input.readMapEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructMapArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructMapArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.key));
    for (var kiter27 in this.key) {
      if (Object.prototype.hasOwnProperty.call(this.key, kiter27)) {
        var viter28 = this.key[kiter27];
        output.writeString(kiter27);
        output.writeString(viter28);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructMapResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructMap(args.success);
    }
  }
};
SharedServiceGetStructMapResult.prototype = {};
SharedServiceGetStructMapResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructMap();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructMapResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructMapResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructSetArgs = function (args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = Thrift.copyList(args.key, [null]);
    }
  }
};
SharedServiceGetStructSetArgs.prototype = {};
SharedServiceGetStructSetArgs.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.SET) {
            this.key = [];
            var _rtmp330 = input.readSetBegin();
            var _size29 = _rtmp330.size || 0;
            for (var _i31 = 0; _i31 < _size29; ++_i31) {
              var elem32 = null;
              elem32 = input.readString().value;
              this.key.push(elem32);
            }
            input.readSetEnd();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructSetArgs.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructSetArgs');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.key.length);
    for (var iter33 in this.key) {
      if (Object.prototype.hasOwnProperty.call(this.key, iter33)) {
        iter33 = this.key[iter33];
        output.writeString(iter33);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceGetStructSetResult = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SharedStruct.SharedStructSet(args.success)
    }
  }
};
SharedServiceGetStructSetResult.prototype = {};
SharedServiceGetStructSetResult.prototype.read = function (input) {
  input.readStructBegin();
  let end = false;
  while (!end) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      end = true;
    } else {
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new SharedStruct.SharedStructSet();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
  }
  input.readStructEnd();
};

SharedServiceGetStructSetResult.prototype.write = function (output) {
  output.writeStructBegin('SharedServiceGetStructSetResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
};

var SharedServiceClient = function (input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
SharedServiceClient.prototype = {};

SharedServiceClient.prototype.getStructI8 = function (key, callback) {
  this.sendGetStructI8(key, callback);
  if (!callback) {
    return this.recvGetStructI8();
  }
};

SharedServiceClient.prototype.sendGetStructI8 = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructI8Args(params);
  try {
    this.output.writeMessageBegin('getStructI8', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructI8();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructI8 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructI8Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructI8 failed: unknown result';
};

SharedServiceClient.prototype.getStructI16 = function (key, callback) {
  this.sendGetStructI16(key, callback);
  if (!callback) {
    return this.recvGetStructI16();
  }
};

SharedServiceClient.prototype.sendGetStructI16 = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructI16Args(params);
  try {
    this.output.writeMessageBegin('getStructI16', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructI16();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructI16 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructI16Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructI16 failed: unknown result';
};

SharedServiceClient.prototype.getStructI32 = function (key, callback) {
  this.sendGetStructI32(key, callback);
  if (!callback) {
    return this.recvGetStructI32();
  }
};

SharedServiceClient.prototype.sendGetStructI32 = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructI32Args(params);
  try {
    this.output.writeMessageBegin('getStructI32', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructI32();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructI32 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructI32Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructI32 failed: unknown result';
};

SharedServiceClient.prototype.getStructI64 = function (key, callback) {
  this.sendGetStructI64(key, callback);
  if (!callback) {
    return this.recvGetStructI64();
  }
};

SharedServiceClient.prototype.sendGetStructI64 = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructI64Args(params);
  try {
    this.output.writeMessageBegin('getStructI64', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructI64();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructI64 = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructI64Result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructI64 failed: unknown result';
};

SharedServiceClient.prototype.getStructDouble = function (key, callback) {
  this.sendGetStructDouble(key, callback);
  if (!callback) {
    return this.recvGetStructDouble();
  }
};

SharedServiceClient.prototype.sendGetStructDouble = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructDoubleArgs(params);
  try {
    this.output.writeMessageBegin('getStructDouble', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructDouble();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructDouble = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructDoubleResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructDouble failed: unknown result';
};

SharedServiceClient.prototype.getStructBool = function (key, callback) {
  this.sendGetStructBool(key, callback);
  if (!callback) {
    return this.recvGetStructBool();
  }
};

SharedServiceClient.prototype.sendGetStructBool = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructBoolArgs(params);
  try {
    this.output.writeMessageBegin('getStructBool', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructBool();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructBool = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructBoolResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructBool failed: unknown result';
};

SharedServiceClient.prototype.getStructBinary = function (key, callback) {
  this.sendGetStructBinary(key, callback);
  if (!callback) {
    return this.recvGetStructBinary();
  }
};

SharedServiceClient.prototype.sendGetStructBinary = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructBinaryArgs(params);
  try {
    this.output.writeMessageBegin('getStructBinary', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructBinary();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructBinary = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructBinaryResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructBinary failed: unknown result';
};

SharedServiceClient.prototype.getStructString = function (key, callback) {
  this.sendGetStructString(key, callback);
  if (!callback) {
    return this.recvGetStructString();
  }
};

SharedServiceClient.prototype.sendGetStructString = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructStringArgs(params);
  try {
    this.output.writeMessageBegin('getStructString', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructString();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructString = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructStringResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructString failed: unknown result';
};

SharedServiceClient.prototype.getStructList = function (key, callback) {
  this.sendGetStructList(key, callback);
  if (!callback) {
    return this.recvGetStructList();
  }
};

SharedServiceClient.prototype.sendGetStructList = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructListArgs(params);
  try {
    this.output.writeMessageBegin('getStructList', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructList();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructList = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructListResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructList failed: unknown result';
};

SharedServiceClient.prototype.getStructMap = function (key, callback) {
  this.sendGetStructMap(key, callback);
  if (!callback) {
    return this.recvGetStructMap();
  }
};

SharedServiceClient.prototype.sendGetStructMap = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructMapArgs(params);
  try {
    this.output.writeMessageBegin('getStructMap', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructMap();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructMap = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructMapResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructMap failed: unknown result';
};

SharedServiceClient.prototype.getStructSet = function (key, callback) {
  this.sendGetStructSet(key, callback);
  if (!callback) {
    return this.recvGetStructSet();
  }
};

SharedServiceClient.prototype.sendGetStructSet = function (key, callback) {
  var params = {
    key: key
  };
  var args = new SharedServiceGetStructSetArgs(params);
  try {
    this.output.writeMessageBegin('getStructSet', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recvGetStructSet();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SharedServiceClient.prototype.recvGetStructSet = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharedServiceGetStructSetResult();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStructSet failed: unknown result';
};

export default SharedServiceClient;